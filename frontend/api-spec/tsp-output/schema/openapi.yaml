openapi: 3.1.0
info:
  title: (title)
  version: '1.0'
  description: A sample service
tags:
  - name: auth
  - name: todos
paths:
  /auth/sign-in:
    post:
      operationId: post-auth-sign-in
      summary: Sign In
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          headers:
            Set-Cookie:
              required: false
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                required:
                  - errors
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInInput'
  /auth/sign-up:
    post:
      operationId: post-auth-sign-up
      summary: Sign Up
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpValidationErrorResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
      tags:
        - auth
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignUpInput'
  /auth/validate-sign-up:
    post:
      operationId: post-auth-validate-sign-up
      summary: Validate Sign Up
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpValidationErrorResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
      tags:
        - auth
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignUpInput'
  /todos/:
    get:
      operationId: get-todos
      summary: Fetch Todos
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchTodosResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchTodosResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
      tags:
        - todos
      security:
        - ApiKeyAuth: []
    post:
      operationId: post-todos
      summary: Create Todo Schema
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreTodoResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreTodoResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
      tags:
        - todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreTodoInput'
      security:
        - ApiKeyAuth: []
  /todos/{id}:
    get:
      operationId: get-todo
      summary: Show Todo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowTodoResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
      tags:
        - todos
      security:
        - ApiKeyAuth: []
    put:
      operationId: put-todo
      summary: Update Todo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreTodoResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreTodoResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
      tags:
        - todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreTodoInput'
      security:
        - ApiKeyAuth: []
    delete:
      operationId: delete-todo
      summary: Delete Todo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTodoResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
      tags:
        - todos
      security:
        - ApiKeyAuth: []
components:
  schemas:
    DeleteTodoResponse:
      type: object
      required:
        - code
        - result
      properties:
        code:
          type: integer
        result:
          type: boolean
      title: Delete Todo Response
    FetchTodosResponse:
      type: object
      required:
        - todos
      properties:
        todos:
          type: array
          items:
            $ref: '#/components/schemas/Todo'
      title: Fetch Todos Response
    ShowTodoResponse:
      type: object
      required:
        - todo
      properties:
        todo:
          $ref: '#/components/schemas/Todo'
      title: Show Todo Response
    SignInInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
      title: Sign In Input
    SignUpInput:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        birthday:
          type: string
          format: date
        frontIdentification:
          type: string
          format: binary
        backIdentification:
          type: string
          format: binary
      required:
        - firstName
        - lastName
        - email
        - password
    SignUpValidationError:
      type: object
      properties:
        firstName:
          type: array
          items:
            type: string
        lastName:
          type: array
          items:
            type: string
        email:
          type: array
          items:
            type: string
        password:
          type: array
          items:
            type: string
        birthday:
          type: array
          items:
            type: string
        frontIdentification:
          type: array
          items:
            type: string
        backIdentification:
          type: array
          items:
            type: string
      title: Sign Up Validation Error
    SignUpValidationErrorResponse:
      type: object
      required:
        - code
        - errors
      properties:
        code:
          type: integer
        errors:
          $ref: '#/components/schemas/SignUpValidationError'
    StoreTodoInput:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
        content:
          type: string
      title: Todo Input
    StoreTodoResponse:
      type: object
      required:
        - code
        - errors
      properties:
        code:
          type: integer
        errors:
          $ref: '#/components/schemas/StoreTodoValidationError'
      title: Store Todo Response
    StoreTodoValidationError:
      type: object
      properties:
        title:
          type: array
          items:
            type: string
        content:
          type: array
          items:
            type: string
      title: Store Todo Validation Error
    Todo:
      type: object
      required:
        - id
        - title
        - content
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
      title: Todo Object
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: cookie
      name: token
servers:
  - url: https://localhost:8080
    variables: {}
